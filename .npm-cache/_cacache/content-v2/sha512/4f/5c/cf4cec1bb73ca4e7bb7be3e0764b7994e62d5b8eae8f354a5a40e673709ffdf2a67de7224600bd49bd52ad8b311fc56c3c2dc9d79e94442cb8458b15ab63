{"_id":"md-block","_rev":"1-aa59b389be234834898f238f9ed4afad","name":"md-block","dist-tags":{"latest":"0.0.1"},"versions":{"0.0.1":{"name":"md-block","version":"0.0.1","description":"A custom element for rendering stylable (light DOM) Markdown","main":"md-block.js","scripts":{"test":"open index.html"},"repository":{"type":"git","url":"git+https://github.com/LeaVerou/md-block.git"},"keywords":["Markdown","WebComponents","CustomElements","markdown-to-html","marked","Prism"],"author":{"name":"Lea Verou"},"license":"MIT","bugs":{"url":"https://github.com/LeaVerou/md-block/issues"},"homepage":"https://md-block.verou.me","gitHead":"9a1e57434538f65153b780dc73cf72a60abf625e","_id":"md-block@0.0.1","_nodeVersion":"16.11.1","_npmVersion":"8.1.4","dist":{"integrity":"sha512-uXAp27jR+ztgoWyQfaktpWYNbknlpzmeYfIkeYGwGjkZDXTcWmom9eVgUsjEn4/I9evLdfydWB0PIzHq9VjUwg==","shasum":"d2b8c34dbd7158333e603a482413162c49ac0fb8","tarball":"https://registry.npmjs.org/md-block/-/md-block-0.0.1.tgz","fileCount":11,"unpackedSize":46868,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhoQT/CRA9TVsSAnZWagAAvB8QAJsmVHaV6EtRyBjzipO2\nljSlClrxNaVzV1OAP23nD4O0GrQtoGD2TR+ARcerNh+ZcHrfobNFzifJTxXZ\nNDQqfsq0bZDiOYtdorsZ/z9C+e7SD0befi03PWUsX6JH0JEo+0HydJCFA1+Z\nLo+NYyOC/L9PKr4e9uIWImQdLSxYOCG4wcS3MlIqTf57vRsWfHc0MXG+zSf8\nqWWnv6hbSIhyboWVdL4m0k9B9N/gdtdrICU+HmTN4FozJmn4mM6byvbKWIyq\nfJlW3n45JgtZQgF3zg1DVQR3saUd4TigkaDGUn1pTAaK4wrm5vBVWl45Uahq\n7rK3nWUUMQWJSUcycG8iko41NG7gsoy2U1C9QB2Hpq3pWuZHomDsuwf32fgu\njFRskahuxBlGt6AANBcTBQTIiXYP/xyqUXhYmHFVhaRw8ywYA3weSAWdds2S\nEycI2qs2dGqWxwB2T0keKTgb2EePAVdfBWYaedo9k/gZG749NgatMcghXkbN\n420W02yT0KSGinlAzWGyI5c9Vfi48R9a8Ysp1czgWoeF0lLmqchrT3nTvLHP\neF/9GZfnM9n8Pzp3jV/zGOFFXRHOj3ozJ0xMs408PIcjot2H7aaJjfI3D2QN\nPhyzWgRT/VF35PY6GiPTvjB7V5nAJZDa1HsXkG9m0lBOd7Ex2ZrZjjYm0axu\n2ey+\r\n=cU6L\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEIkrBCzUIgWaqTI0rlPNRKlauwCIXxV8COMcu/1yz8JAiEAnPDzfhf0LWx1KR4yLt7AFJt5Gn9/Nhz45dbp5Wcv5M4="}]},"_npmUser":{"name":"leaverou","email":"lea@verou.me"},"directories":{},"maintainers":[{"name":"leaverou","email":"lea@verou.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/md-block_0.0.1_1637942527749_0.004334944978526822"},"_hasShrinkwrap":false}},"time":{"created":"2021-11-26T16:02:07.748Z","0.0.1":"2021-11-26T16:02:07.902Z","modified":"2022-05-09T00:52:33.325Z"},"maintainers":[{"name":"leaverou","email":"lea@verou.me"}],"description":"A custom element for rendering stylable (light DOM) Markdown","homepage":"https://md-block.verou.me","keywords":["Markdown","WebComponents","CustomElements","markdown-to-html","marked","Prism"],"repository":{"type":"git","url":"git+https://github.com/LeaVerou/md-block.git"},"author":{"name":"Lea Verou"},"bugs":{"url":"https://github.com/LeaVerou/md-block/issues"},"license":"MIT","readme":"<section>\n\n# Motivation\n\nThere are many web components these days to render Markdown to HTML. Here are a few:\n\n* [`<zero-md>`](https://zerodevx.github.io/zero-md/)\n* [`<marked-element>`](https://github.com/PolymerElements/marked-element)\n* ‚Ä¶and I‚Äôm sure many others\n\nHowever, all render the resulting Markdown in Shadow DOM, making it painful to style like a regular part of the page, which my use cases required.\n`<zero-md>` supports opt-in light DOM rendering, but it's tedious to add an extra attribute per element.\n\nI also wanted a [few more things](#features) existing web components didn't have.\nPlus, making stuff is fun. üòÖ\n\nSo I made my own. Feel free to use it. Or don't. ü§∑üèΩ‚Äç‚ôÄÔ∏è\nI primarily wrote it to scratch my own itch anyway! üòä\n</section>\n\n<section>\n\n# Features\n\n* Zero dependencies (except marked, obvs, which is only loaded if a `<md-block>` or `<md-span>` element is actually used on the page)\n* Styleable with regular selectors, just like the rest of the page\n* Load external Markdown files or render inline content\n* Customize start heading level (e.g. so that `# Foo` becomes a `<h3>` and not an `<h1>`)\n* Also comes with `<md-span>`, for lightweight inline markdown\n* [Prism](https://prismjs.com) is automatically used for syntax highlighting, if included ([but can be included dynamically too](#loading-prism-dynamically))\n\n[View demos](https://md-block.verou.me/#demos)\n\n</section>\n\n<section>\n\n# Usage\n\nVia HTML:\n```html\n<script type=\"module\" src=\"https://md-block.verou.me/md-block.js\"></script>\n```\n\nIn JS:\n```js\nimport {MarkdownBlock, MarkdownSpan, MarkdownElement} from \"https://md-block.verou.me/md-block.js\";\n```\n\nOf course you can also use npm if that's your jam:\n\n```\nnpm install md-block\n```\n```js\nimport {MarkdownBlock, MarkdownSpan, MarkdownElement} from \"md-block\";\n```\n\nImporting the module in any of these ways also registers two custom elements: `<md-block>` for block level content and `<md-span>` for inline content.\nIf you additionally want to use other tag names, [you can](#using-different-tag-names).\n\n</section>\n\n<section>\n\n# API\n\n## Both `<md-block>` and `<md-span>`\n\n| Attribute | Property | Type | Description |\n|-----------|----------|------|-------------|\n| - | `mdContent` | String | Actual Markdown code initially read from the HTML or fetched from `src`. Can also be set to render new Markdown code |\n| `rendered` | `rendered` *(Read-only)* | String | Added to the element after Markdown has been rendered. Thus, you can use `md-block:not([rendered])` in your CSS to style the element differently before rendering and minimize FOUC |\n| `untrusted` | `untrusted` *(Read-only)* | Boolean | Sanitize contents. [Read more](#handling-untrusted-content)\n\n## `<md-block>`\n\n| Attribute | Property | Type | Description |\n|-----------|----------|------|-------------|\n| `src` | `src` | String or URL | External Markdown file to load. If specified, original element content will be rendered and displayed while the file is loading (or if it fails to load). |\n| `hmin` | `hmin` | Number | Minimum heading level |\n| `hlinks` | `hlinks` | String | Whether to linkify headings. If present with no value, the entire heading text becomes the link, otherwise the symbol provided becomes the link. Note that this is only about displaying links, headings will get ids anyway |\n\n## `<md-span>`\n\n*(No attributes or properties at the moment)*\n\n</section>\n\n<section>\n\n# Recipes\n\n## Updating the Markdown\n\nWhile you can provide initial Markdown inline, after the element is rendered, changing its contents will not cause it to re-render,\nsince its contents are now the parsed HTML (this is a disadvantage of this approach, compared to the Shadow DOM ones).\n\nIf you need to update its contents dynamically, use `element.mdContent`.\nYou can also read that property to get access to the Markdown code that was last rendered, whether it came from the element's contents,\nor fetched from a URL.\n\nNote that setting `mdContent` will override any remote URL provided via `src`.\n\n## Minimizing FOUC\n\nmd-block adds a `rendered` attribute to elements whose Markdown has been rendered.\nThis allows you to style unrendered content however you please, by using a `md-block:not([rendered])` CSS selector.\n\n- You could hide it entirely via `md-block:not([rendered]) { display: none }`\n- You could apply `white-space: pre-line` to it so that at least paragraphs are not all smushed together\n- ‚Ä¶or you could do something fancier.\n\nI'd recommend you consider *how it fails* before deciding what to do. It's the Internet, üí© happens.\nDo you want your content to not be visible if a script doesn't load?\n\nWhen loading remote content, there are two renders: First, any fallback content renders, then the remote content.\nBecause we often want to style the element differently until the remote content renders, the `rendered` attribute has keyword values, depending on what happened:\n\n* `fallback` when only fallback content has been rendered\n* `remote` if remote content has been rendered\n* `content` if element content has been rendered and there is no `src` attribute present\n* `property` if content has been rendered by setting `this.mdContent` directly\n\n## Using different tag names\n\nBy default, md-block registers two custom elements: `<md-block>` for block-level content and `<md-span>` for inline content.\nYou can use different names, but [since each class can only be associated with one tag name](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define#:~:text=Exceptions-,notsupportederror,-DOMException), you need to create your own subclass:\n\n```js\nimport {MarkdownBlock, MarkdownSpan, MarkdownElement} from \"https://md-block.verou.me/md-block.js\"\n\ncustomElements.define(\"md-content\", class MarkdownContent extends MarkdownBlock {});\n```\n\n## Handling untrusted content\n\nBy default md-block does not santize the Markdown you provide, since in most use cases the content is trusted.\n\nIf you need to render untrusted content use the `untrusted` attribute, which will dynamically load [DOMPurify](https://github.com/cure53/DOMPurify) and use it.\nThis is not dynamic, you need to add it in your actual markup (or before the element is connected, if dynamically generated).\nThe reason is that it's unsafe to add it later: if the content has been already rendered once and treated as safe, it's pointless to sanitize it afterwards and re-render.\n\nImportant: Do **not** rely on the `untrusted` attribute for inline Markdown! This is mainly useful for content linked via the `src` attribute.\nIf there is potentially malicious code in the inline Markdown you are using, it will be picked up by the browser before md-block has the change to do anything about it.\nInstead, use a regular `<md-block>` element, and `MarkdownElement.sanitize()` for the untrusted content.\n\n## Using different URLs for marked and DOMPurify\n\nBy default, `md-block` dynamically loads marked and DOMPurify from a CDN. If you want to use different versions, there is a number of ways:\n\nProbably the easiest is if you use the versions of these libraries that create a global, md-block will use that instead of loading them.\n\nThe URLs md-block uses to fetch these libraries reside on a separate `URLs` export. So theoretically you could do something like this:\n\n```js\nimport {URLs as MdBlockURLS, MarkdownBlock, MarkdownSpan, MarkdownElement} from \"./md-block.js\";\n\nMdBlockURLS.marked = \"./marked.js\";\nMdBlockURLS.DOMPurify = \"./purify.es.js\";\n```\n\nBut it's uncertain whether the new URLs will be picked up before the default ones load. In my tests that seems to work for DOMPurify but not marked.\nThese libraries are loaded when the element is connected, so you *could* add the `<md-block>` elements dynamically to the document after you set the URLs, but that's a bit of a hassle.\n\n## Loading Prism dynamically\n\nBy default `md-block` will use Prism if it's available, but won‚Äôt load it dynamically if it isn't.\nYou *could* tell it to load Prism dynamically, **only if there are actual code elements**, by providing a Prism URL:\n\n```js\nimport {URLs as MdBlockURLS, MarkdownBlock, MarkdownSpan, MarkdownElement} from \"./md-block.js\";\n\nMdBlockURLS.Prism = \"./prism.js\";\n// You can optionally also provide a Prism CSS URL:\nMdBlockURLS.PrismCSS = \"./prism.css\";\n```\n\n## `<md-block>` inception\n\nDid you know you can actualy use `<md-block>` *inside your Markdown* and it works correctly?\n\nFor a cool example of this, check out [the Stretchy docs](https://stretchy.verou.me/#browser-support)\n\n## How to set different Markdown options/flavor?\n\nRight now, this element uses GFM as a Markdown flavor and doesn‚Äôt expose a whole lot of options (besides `hmin` and `hlinks`).\nThat‚Äôs because I originally wrote it for my own needs, and that‚Äôs what I needed.\nI‚Äôm not opposed to adding more customizability, if there are actual use cases that require it.\nIf you have such use cases, please [open an issue](https://github.com/leaverou/md-block/issues/new).\n\n</section>","readmeFilename":"README.md"}